{"version":3,"sources":["../samples/browser/react-todomvc/react-todomvc.fsx"],"names":[],"mappings":"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","file":"react-todomvc.js","sourceRoot":"/Users/alfonsogarciacaronunez/Documents/Github/Fable/temp","sourcesContent":["(**\n - title: React TodoMVC with Fable\n - tagline: Unveil the power of React and functional programming!\n - app-style: width:800px; margin:20px auto 50px auto;\n - require-paths: `'classnames': 'lib/classnames/index', 'react': 'lib/react/react-with-addons', 'react-dom': 'lib/react/react-dom'`\n - intro: This is a port of [React TodoMVC](http://todomvc.com/examples/react/) to show how easy\n   is to take advantage of the full power of [React](https://facebook.github.io/react/) in Fable apps.\n   You can also compare the [F# source code](https://github.com/fable-compiler/Fable/blob/master/samples/browser/react-todomvc/react-todomvc.fsx)\n   with the [original JS implementation](https://github.com/tastejs/todomvc/tree/gh-pages/examples/react)\n   to see the advantages of Fable programming. And remember [Fable is also compatible with React Native](http://www.navision-blog.de/blog/2016/08/06/fable-react-native/) for mobile development!\n*)\n\n(**\n## JavaScript bindings and helpers\n\nFable includes [React bindings and helpers](https://www.npmjs.com/package/fable-import-react)\nto make interaction with the tool more idiomatic in F#. We will also load a couple more of\nJS libraries: [classnames](https://github.com/JedWatson/classnames) with require.js and\n[director](https://github.com/flatiron/director) directly with a `<script>` tag.\nWe will make them accessible to our program with [Import and Global attributes](https://fable-compiler.github.io/docs/interacting.html#Import-attribute)\nrespectively.\n*)\n\n#r \"node_modules/fable-core/Fable.Core.dll\"\n#load \"node_modules/fable-import-react/Fable.Import.React.fs\"\n#load \"node_modules/fable-import-react/Fable.Helpers.React.fs\"\n\nopen System\nopen Fable.Core\nopen Fable.Core.JsInterop\nopen Fable.Import\n\n// JS utility for conditionally joining classNames together\nlet [<Import(\"default\",\"classnames\")>] classNames(o: obj): string =\n    failwith \"JS only\"\n\n// Director is a router. Routing is the process of determining what code to run when a URL is requested.\nlet [<Global>] Router(o: obj): obj =\n    failwith \"JS only\"\n\n(**\n## Utility module\n\nThis module is the equivalent of [utils.js](https://github.com/tastejs/todomvc/blob/gh-pages/examples/react/js/utils.js)\nin the original implementation. Note we only need a couple of functions to load\nand save data from the browser local storage as things like Guid generation\n(`System.Guid.NewGuid()`) or record immutable updates are built-in in F#/Fable.\n\n> Because our `Todo` type is really simple (see below), `JSON.parse` will meet our needs.\nFor more complicated structures see [JSON serialization with Fable](https://fable-compiler.github.io/docs/interacting.html#JSON-serialization). \n*)\n\nmodule Util =\n    let load<'T> key =\n        Browser.localStorage.getItem(key) |> unbox\n        |> Option.map (JS.JSON.parse >> unbox<'T>)\n\n    let save key (data: 'T) =\n        Browser.localStorage.setItem(key, JS.JSON.stringify data)\n\n(**\n## Model definiton\n\nThis is an almost direct port of [todoModel.js](https://github.com/tastejs/todomvc/blob/gh-pages/examples/react/js/todoModel.js)\nwhich separates de logic of the app from the views. The biggest difference is with\na line of code we can define our `Todo` type and let the F# compiler statically check\nwe're always manipulating the structure correctly.\n*)\n\ntype Todo = { id: Guid; title: string; completed: bool }\n\ntype TodoModel(key) =\n    member val key = key\n    member val todos: Todo[] = defaultArg (Util.load key) [||] with get, set\n    member val onChanges: (unit->unit)[] = [||] with get, set\n\n    member this.subscribe(onChange) =\n        this.onChanges <- [|onChange|]\n\n    member this.inform() =\n        Util.save this.key this.todos\n        this.onChanges |> Seq.iter (fun cb -> cb())\n\n    member this.addTodo(title) =\n        this.todos <-\n            [|{ id=Guid.NewGuid(); title=title; completed=false }|]\n            |> Array.append this.todos\n        this.inform()\n\n    member this.toggleAll(checked') =\n        this.todos <- this.todos |> Array.map (fun todo ->\n            { todo with completed = checked' })\n        this.inform()\n\n    member this.toggle(todoToToggle) =\n        this.todos <- this.todos |> Array.map (fun todo ->\n            if todo.id <> todoToToggle.id\n            then todo\n            else { todo with completed = (not todo.completed) })\n        this.inform()\n\n    member this.destroy(todoToDestroy) =\n        this.todos <- this.todos |> Array.filter (fun todo ->\n            todo.id <> todoToDestroy.id)\n        this.inform()\n\n    member this.save(todoToSave, text) =\n        this.todos <- this.todos |> Array.map (fun todo ->\n            if todo.id <> todoToSave.id\n            then todo\n            else { todo with title = text })\n        this.inform()\n\n    member this.clearCompleted() =\n        this.todos <- this.todos |> Array.filter (fun todo ->\n            not todo.completed)\n        this.inform()\n\n(**\n## React views\n\nWe enter now in React's realm to define three views: TodoItem, TodoFooter and TodoApp.\nWe can use classes to define the views as explained in [React docs](https://facebook.github.io/react/docs/reusable-components.html#es6-classes),\ninheriting from `React.Component` and defining a `render` method, where we can use\nthe DSL defined in Fable's React helper to build HTML elements in a similar fashion\nas we would do with JSX. \n\n> For convenience, we use a module alias (`R`) to shorten references to the React helper.\n\nA big difference from JS is we can define simple models for the state and props\nof custom views, either by using records or interfaces, to allow for autocompletion\nand static checking, making our app much more robust than by using plain JS objects.\n\n*)\n\nmodule R = Fable.Helpers.React\nopen R.Props\n\ntype TodoItemState = { editText: string }\ntype TodoItemProps =\n    abstract key: Guid \n    abstract todo: Todo \n    abstract editing: bool\n    abstract onSave: obj->unit\n    abstract onEdit: obj->unit\n    abstract onDestroy: obj->unit\n    abstract onCancel: obj->unit\n    abstract onToggle: obj->unit\n\nlet [<Literal>] ESCAPE_KEY = 27.\nlet [<Literal>] ENTER_KEY = 13.\nlet [<Literal>] ALL_TODOS = \"all\"\nlet [<Literal>] ACTIVE_TODOS = \"active\"\nlet [<Literal>] COMPLETED_TODOS = \"completed\"\n\ntype TodoItem(props, ctx) as this =\n    inherit React.Component<TodoItemProps, TodoItemState>(props, ctx)\n    do this.state <- { editText = props.todo.title }\n\n    let mutable editField: obj option = None\n\n    member this.handleSubmit (e: React.SyntheticEvent) =\n        match this.state.editText.Trim() with\n        | value when value.Length > 0 ->\n            this.props.onSave(value)\n            this.setState { editText = value }\n        | _ ->\n            this.props.onDestroy(e)\n\n    member this.handleEdit (ev: React.MouseEvent) =\n        this.props.onEdit(ev)\n        this.setState { editText = this.props.todo.title }\n\n    member this.handleKeyDown (e: React.KeyboardEvent) =\n        match e.which with\n        | ESCAPE_KEY ->\n            this.setState { editText = this.props.todo.title }\n            this.props.onCancel(e)\n        | ENTER_KEY ->\n            this.handleSubmit(e)\n        | _ -> ()\n\n    member this.handleChange (e: React.SyntheticEvent) =\n        if this.props.editing then\n            this.setState { editText = string e.target?value }\n\n    member this.shouldComponentUpdate (nextProps: TodoItemProps) (nextState: TodoItemState) =\n        not(obj.ReferenceEquals(nextProps.todo, this.props.todo))\n        || nextProps.editing <> this.props.editing\n        || nextState.editText <> this.state.editText\n\n    member this.componentDidUpdate (prevProps: TodoItemProps) =\n        if not prevProps.editing && this.props.editing then\n            let node =\n                ReactDom.findDOMNode(unbox editField.Value)\n                :?> Browser.HTMLInputElement\n            node.focus()\n            node.setSelectionRange(float node.value.Length, float node.value.Length)\n\n    member this.render () =\n        let className =\n            classNames(\n                createObj [\n                    \"completed\" ==> this.props.todo.completed\n                    \"editing\" ==> this.props.editing\n                ])\n        // The React helper defines a simple DSL to build HTML elements.\n        // For more info about transforming F# unions to JS option objects:\n        // https://fable-compiler.github.io/docs/interacting.html#KeyValueList-attribute\n        R.li [ ClassName className ] [\n            R.div [ ClassName \"view\" ] [\n                R.input [\n                    ClassName \"toggle\"\n                    Type \"checkbox\"\n                    Checked this.props.todo.completed\n                    OnChange this.props.onToggle  \n                ] []\n                R.label [ OnDoubleClick this.handleEdit ]\n                        [ unbox this.props.todo.title ]\n                R.button [\n                    ClassName \"destroy\"\n                    OnClick this.props.onDestroy ] [ ]\n            ]\n            R.input [\n                ClassName \"edit\"\n                Ref (fun x -> editField <- Some x)\n                Value (U2.Case1 this.state.editText)\n                OnBlur this.handleSubmit\n                OnChange this.handleChange\n                OnKeyDown this.handleKeyDown\n            ] []\n        ]\n\ntype TodoFooterProps =\n    abstract count: int\n    abstract completedCount: int\n    abstract onClearCompleted: obj->unit\n    abstract nowShowing: string\n\ntype TodoFooter(props, ctx) =\n    inherit React.Component<TodoFooterProps,obj>(props, ctx)\n    member this.render () =\n        let activeTodoWord =\n            \"item\" + (if this.props.count = 1 then \"\" else \"s\")\n        let clearButton =\n            if this.props.completedCount > 0 then\n                R.button [\n                    ClassName \"clear-completed\"\n                    OnClick this.props.onClearCompleted\n                ] [ unbox \"Clear completed\" ] |> Some\n            else None\n        let className category =\n            classNames(\n                createObj [\"selected\" ==> (this.props.nowShowing = category)])\n        R.footer [ ClassName \"footer\" ] [\n            R.span [ ClassName \"todo-count\" ] [\n                R.strong [] [ unbox this.props.count ]\n                unbox (\" \" + activeTodoWord + \" left\")\n            ]\n            R.ul [ ClassName \"filters\" ] [\n                R.li [] [\n                    R.a [\n                        Href \"#/\"\n                        ClassName (className ALL_TODOS)\n                    ] [ unbox \"All\" ] ]\n                unbox \" \"\n                R.li [] [\n                    R.a [\n                        Href \"#/active\"\n                        ClassName (className ACTIVE_TODOS)\n                    ] [ unbox \"Active\" ] ]\n                unbox \" \"\n                R.li [] [\n                    R.a [\n                        Href \"#/completed\"\n                        ClassName (className COMPLETED_TODOS)\n                    ] [ unbox \"Completed\" ] ]\n                clearButton.Value\n            ]\n        ]\n\ntype TodoAppProps = { model: TodoModel }\ntype TodoAppState = { nowShowing: string; editing: Guid option; newTodo: string }\n\ntype TodoApp(props, ctx) as this =\n    inherit React.Component<TodoAppProps, TodoAppState>(props, ctx)\n    do this.state <- { nowShowing=ALL_TODOS; editing=None; newTodo=\"\" }\n\n    member this.componentDidMount () =\n        let nowShowing category =\n            fun () -> this.setState({this.state with nowShowing = category})\n        let router =\n            Router(createObj [\n                    \"/\" ==> nowShowing ALL_TODOS\n                    \"/active\" ==> nowShowing ACTIVE_TODOS\n                    \"/completed\" ==> nowShowing COMPLETED_TODOS\n            ])\n        // We haven't defined any interface for the router object but we can\n        // can still dynamically access its properties with the `?` operator. \n        router?init(\"/\")\n\n    member this.handleChange (ev: React.SyntheticEvent) =\n        this.setState({ this.state with newTodo = unbox ev.target?value })\n\n    member this.handleNewTodoKeyDown (ev: React.KeyboardEvent) =\n        if ev.keyCode = ENTER_KEY then\n            ev.preventDefault()\n            let v = this.state.newTodo.Trim()\n            if v.Length > 0 then\n                this.props.model.addTodo(v)\n                this.setState({ this.state with newTodo = \"\" })\n\n    member this.toggleAll (ev: React.SyntheticEvent) =\n        this.props.model.toggleAll(unbox ev.target?``checked``)\n\n    member this.toggle (todoToToggle) =\n        this.props.model.toggle(todoToToggle)\n\n    member this.destroy (todo) =\n        this.props.model.destroy(todo)\n\n    member this.edit (todo: Todo) =\n        this.setState({ this.state with editing = Some todo.id })\n\n    member this.save (todoToSave, text) =\n        this.props.model.save(todoToSave, text)\n        this.setState({ this.state with editing = None })\n\n    member this.cancel () =\n        this.setState({ this.state with editing = None })\n\n    member this.clearCompleted () =\n        this.props.model.clearCompleted()\n\n    member this.render () =\n        let todos = this.props.model.todos\n        let todoItems = \n            todos\n            |> Seq.filter (fun todo ->\n                match this.state.nowShowing with\n                | ACTIVE_TODOS -> not todo.completed\n                | COMPLETED_TODOS -> todo.completed\n                | _ -> true)\n            |> Seq.map (fun todo ->\n                // R.com is used to instantiate customly defined React components.\n                // Note we use an F# object expression to build the props.\n                R.com<TodoItem,_,_>(\n                    { new TodoItemProps with\n                        member __.key = todo.id\n                        member __.todo = todo\n                        member __.onToggle _ = this.toggle(todo)\n                        member __.onDestroy _ = this.destroy(todo)\n                        member __.onEdit _ = this.edit(todo)\n                        member __.editing =\n                            match this.state.editing with\n                            | Some editing -> editing = todo.id\n                            | None -> false\n                        member __.onSave text = this.save(todo, string text)\n                        member __.onCancel _ = this.cancel()\n                    }) [])\n                |> Seq.toList\n        let activeTodoCount =\n            todos |> Array.fold (fun accum todo ->\n                if todo.completed then accum else accum + 1\n            ) 0\n        let completedCount =\n            todos.Length - activeTodoCount\n        let footer =\n            if activeTodoCount > 0 || completedCount > 0 then\n                R.com<TodoFooter,_,_>(\n                    { new TodoFooterProps with\n                        member __.count = activeTodoCount\n                        member __.completedCount = completedCount\n                        member __.nowShowing = this.state.nowShowing\n                        member __.onClearCompleted _ = this.clearCompleted()\n                }) [] |> Some\n            else None\n        let main =\n            if todos.Length > 0 then\n                R.section [ ClassName \"main\" ] [\n                    R.input [\n                        ClassName \"toggle-all\"\n                        Type \"checkbox\"\n                        OnChange this.toggleAll\n                        Checked (activeTodoCount = 0)\n                    ] []\n                    R.ul [ ClassName \"todo-list\" ] todoItems\n                ] |> Some\n            else None\n        R.div [] [\n            R.header [ ClassName \"header\" ] [\n                R.h1 [] [ unbox \"todos\" ]\n                R.input [\n                    ClassName \"new-todo\"\n                    Placeholder \"What needs to be done?\"\n                    Value (U2.Case1 this.state.newTodo)\n                    OnKeyDown this.handleNewTodoKeyDown\n                    OnChange this.handleChange\n                    AutoFocus true\n                ] []\n            ]\n            main.Value\n            footer.Value\n        ]\n\n(**\n## Firing up the app\n\nThere's nothing left to do but building our model, mount our `TodoApp` view\nin the DOM by using `ReactDom.render` and subscribe to the events. Happy coding!\n*)   \n\nlet model = TodoModel(\"react-todos\")\nlet render() =\n    ReactDom.render(\n        R.com<TodoApp,_,_> { model = model } [],\n        Browser.document.getElementsByClassName(\"todoapp\").[0]\n    ) |> ignore\nmodel.subscribe(render)\nrender()"]}