{"version":3,"sources":["../samples/browser/lsystem/html.fs"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4CAAA;AAAA;;AAAA;AAAA;AAAA,G;;;;kCAAA;AAAA;;AAAA;AAAA;AAAA,G;;;;AAeQ;AAAA,qCAKE;AACF,eAAG,qBAAH,GAAgB,sCAAhB,GACK,wDADL;AAEO,kCAAU;AAAA;AAAA,OAAV;;AACT;AAAA;AAAe;AAA2B;;AAC1C;AAAA;;AACQ,4CAIQ;AAAA,6CAA6C;AAAC,uCAAD;AAAM,WAAnD;AAAqD,SAJ7D,MAEF;AAAA,cAAG,qBAAH,EAAgB;AAAA;AAAqB,WAArC,MACK;AAAA;AAA6B;AAAA;AAC6B;;AAVjE;AAAE,KAAF,EALF,GAEF,uCAFE;AAAI;;AAmBV;AAAA,WAAM,sBAAN,EAA2C;AAAA;AAAgC;;AAClE;AACT;AAA8B;;AAEnB;AAAA;AAAO;;;eACF,8BAAS,2BAAT,E;;;;eACC,8B;;;;AAxCnB,oBA0CK;AAAA;;AAAG;AAAD;;;;;;;;;wCAGH;AAAA;AAAA;AAAA,qDAAkB,aAAlB,EAAkC,aAAlC;AAAA;AAAA;AAAiD;;;;;;;;AA7CrD,sBA+CQ,UA/CR;AAAA,sBAgDQ,oCAhDR","file":"html.js","sourceRoot":"/Users/alfonsogarciacaronunez/Documents/Github/Fable/temp","sourcesContent":["ï»¿module Fable.Html\nmodule FsOption = FSharp.Core.Option\n\nopen Fable.Import.Browser\nopen Fable.Core\n\ntype DomAttribute = \n  | Event of (Element -> Event -> unit)\n  | Property of string\n\ntype DomNode = \n  | Text of string\n  | Element of ns:string * tag:string * attributes:(string * DomAttribute)[] * children : DomNode[]\n\nlet rec render node = \n  match node with\n  | Text(s) -> \n      document.createTextNode(s) :> Node\n\n  | Element(ns, tag, attrs, children) ->\n      let el = \n        if ns = \"\" then document.createElement(tag) :> Element\n        else document.createElementNS(ns, tag)\n      let rc = Array.map render children\n      for c in rc do el.appendChild(c) |> ignore\n      for k, a in attrs do \n        match a with\n        | Property(v) -> \n            if ns = \"\" then el.setAttribute(k, v)\n            else el.setAttributeNS(null, k, v)\n        | Event(f) -> el.addEventListener(k, U2.Case1(EventListener(f el)))\n      el :> Node\n\nlet renderTo (node:HTMLElement) dom = \n  while box node.lastChild <> null do ignore(node.removeChild(node.lastChild))\n  let el = render dom\n  node.appendChild(el) |> ignore\n  \nlet text s = Text(s)\nlet (=>) k v = k, Property(string v)\nlet (=!>) k f = k, Event(f)\n\ntype El(ns) = \n  member x.NS = ns\n  static member (?) (el:El, n:string) = fun a b ->\n    Element(el.NS, n, Array.ofList a, Array.ofList b)\n\nlet h = El(\"\")\nlet s = El(\"http://www.w3.org/2000/svg\")"]}