{"version":3,"sources":["../samples/browser/redux-todomvc/redux-todomvc.fsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCO;AAhCP,iDA4CY;AACM;AAAA;AAAI;;AAAJ,wDACS;AAAA;AAAoB,qBAD7B;AAAA;AAAA;AAAe,iBAAf;AAAA;;AAGJ;AAAM;;AAAN,wCAEI;AAAA,mDAA0B;AAAA;AAAA,qBAA1B;AAA6C,iBAFjD,MACQ;AAAA,mDAA0B;AAAA;AAAA,qBAA1B,aAA8C,YAA9C;AAAqD;AADvB,aAAtC;AAJK,SA5CnB;;AAAA,2CAsDY;AAAI;;AACR;AACA;AAFK,SAtDb;;AAgCO;AAhCP,KAgCO;;;AAhCP;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AAAA,0CAmGO;AAAA,2CADH,uBAA8B;AAAA;AAAA,SAA9B,QACG;AAAA,KAnGP;;;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;AAAA,2CAuHK;AAAA;;AAAA;;AAA6B;AAAA;AAAA;AAA7B;AAAA;AAAA;AAEE,oCAAc,uBAAS,oCAAT,CAAd;AAFF;AAAa;;;;4CAKV;AAAA,oBAAG,cAAH,EACQ;AAAO;;AACX;;AACA,4CACI;AAAA,sCAAc,0BAAd;AAA4B;AAHxB;AAGwB;;;4CAGpC;AAAA,8BAAc,sCAAd;AAA4C;;;0CAG5C;AAAA,oBAAG,mBAAH,EACI;AAAA;AAAuC;AAAA;;;qCAkczC;AAAA;;AAAA,kEA/bM;AAAA,+BAEA,WAAW,yFAAX,CAFA;AAAA;AAAA,4BAOG;AAAA;AAAe,qBAPlB;AAAA,8BAQK;AAAA;AAAiB,qBARtB;AAAA,+BASM;AAAA;AAAiB,qBATvB;AAAA,+BAUO,0BAVP;AAAA;AAAA,iBA+bN;AAA6D;;;;;;;;;AAzkBvE;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;AAAA,sCAgKK;AAAA;;AAAA;;AAAwB;AAAA;AAAA;AAAxB;AAAA;AAAA;AAEE,oCAAc,wBAAd;AAFF;AAAQ;;;;qDAIqB;AAAA,8BACZ,uBADY;AAAC;;;iDAI3B;AAAA,oBAAG,iBAAH,EACK;AAAA;AAAyB,iBAD9B,MAEK;AAAA;AAA6B;;AAClC,8BAAc,wBAAd;AAAkC;;;qCAG9B;AAAA;;AACA,mDAoZF,iDAAgD,6BAlZtC;AAAA;;AAAA;AAAA,uLAEQ;AAAA;AAAyC,qBAFjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAM+B,iBAN/B,EAkZsC,CAAhD,aApZE,GA0ZF,yCAjZa;AAAA;AAAA,iBAiZb,qDAhZkB;AAAA;AAAA;AAAA;AAAA,8BAIU;AAAA;AAAC;AAJX,iBAgZlB,0DAzYkB;AAAA,mCAAe;AAAA;AAAsB;AAArC,iBAyYlB,4EAvYgB;AAAA;AAAA,6BAEW;AAAA;AAAC;AAFZ,iBAuYhB,gBA1ZE;AA0ZF,+DAjYG;AAAA,+BACG,WAAW,oGAAX;AADH,iBAiYH;AA3ZS;;;;;;;;4CA9KnB;AAAA;;AAAA;AAAA,K;;;;AAykBU;AAAA;;AAAA,2DAxXG;AAAA;AAAA,SAwXH,kDAvXG,EAuXH,sBANA,iDAAgD,oOA7WtC;AAAA,gBAAG,iBAAH,EACI;AAAA;AAAkB;AAAA,SA4WgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8FAAhD,aAMA;AAA6D;;AAzkBvE,kCAsOQ;AACA,mCAAK,sEAAL;;AAkWE;AAAA,6DA5VK;AAAA;AAAA,aA4VL,UA3VgB,4CAAR;AAAA;AAAA,eACE,eAAH,GAAwB,mBAAxB,OADC,EAEE,iBAAH,WAFC,CA2VR;AAAA;;AAAA;AAAA;AAAA;AAAA,kEAtVE;AAAA,mCACW,WAAW,sCAAa,yBAAb,GAAX,CADX;AAAA,+BAEM;AAAA;AAAA,yBAFN;AAAA,iCAGa;AAAA;AAAC;AAHd,qBAsVF,UAlVO,wBAkVP;AAAA;AAAA;AAAA;;AAhVF;AAAA;AAAA,uBAAG,kBAAH,GAgVE,4CA/UY;AAAA;AAAA;AAAA,iBA+UZ,8BAhVF;AAAA;AAAA;;AAOI;AAIG,gDAqUL;AAAA,+DAnUc;AAAA,yBAAM;AAAN,iBAmUd,UApUO,uCAAqC;AAAA;AAAY,iBAAjD,CAoUP;AAAA,aArUK,EAHH,kCAGG;;AAqUL,+DAlUO;AAAA;AAAA,aAkUP,UAjUE,kCAiUF,0CAhUO;AAAA;AAAA,aAgUP,4BAAsC,qBAAtC,KA7TQ,wCAAuC;AAAA;AAAsB,aAA7D,CA6TR;AAzUW,SAAT;AA1BQ,KAAZ,EAtOR;;sDAAA;AAAA;;AAAA;AAAA;AAAA,K;;;;;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;AAAA,yCAkRK;AAAA;;AAAA;;AAA2B;AAAA;AAAA;AAA3B;AAAA;AAED,iCACI,QAAK;AAAA;AAAA,oBAE0C;AAAA;AAAA,aAF1C,OAGqC;AAAA;AAAA,aAHrC,GAAL,CADJ;AAFC;AAQE,oCAAc,uBAAd;AARF;AAAW;;;;mDAWR;AAAA,oCAAoB,oCAApB;AAAmC;;;+CAGnC;AAAA,8BAAc,4BAAd;AAAkC;;;4DAGlC;AAAA;;AAAA,uBAAG,2BAAH,GAsSE,2CArSW;AAAA;AAAA;AAAA,6BAGI,0CAHJ;AAAA,8BAIS;AAAA,8CAAyB,iCAAzB;AAAC;AAJV,iBAqSX,aAtSF;AAOS;;;yDAGT;AAAA;;AAAA,uBAAG,2BAAH,GAmRE,0CAAuC,6BAjRjC;AAAA;;AAAA;AAAA,yRAEQ;AAAA;AAAwC,qBAFhD;AAAA;AAAA;AAAA;AAAA,gFAK8B;AAAA;AAAsB,qBALpD,+EAM+B;AAAA;AAAC,qBANhC;AAOqC,iBAPrC,EAiRiC,CAAvC,aAnRF;AAUS;;;qCAGL;AAAA;;AAGG,0DADA,wBAAa,uCAAb,CACA;;AAEuB,yDACtB;AAAA,4CAAuB,SAAvB;AAAA,iBADsB;;AA0Q5B,oEAxQQ;AAAA;AAAA,iBAwQR,UAvQQ,oCAuQR,0CAtQO;AAAA;AAAA,iBAsQP,4BAAsC,WApQ7B,oBA8PT;AAAA,uEAAgD,6BA5PlC;AAAA;;AAAA;AAAA;AAAA;AAAA,0FAGQ;AAAA,iDAAoB,sCAApB;AAAuC,yBAH/C,gEAKQ;AAAA,iDAAoB,kCAApB;AAAkC,yBAL1C,oEAOQ;AAAA,iDAAoB,oCAApB;AAAoC,yBAP5C;AAO8C,qBAP9C,EA4PkC,CAAhD;AAAA,iBA9PS,gBAoQ6B,CAAtC,KA1PQ,iCA0PR;AA/Qe;;;;;;;;;AA1TzB;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;;;;AAAA,iCA6VK;AAAA;;AAAA;;AAAA;;AAAmB;AAAA;AAAA;AAAnB;AAAI;AAAJ;AAEc;AAAA;AAAe;;AAA9B,uCAAe;AAAA;AAA0B,qBAAzC;AAAe;AAA0B;AAFxC;AAIE,qCAAc,kBAAd;;AAtSC;AAAA;AAAA,2BAuSwC;AAAA;AAAA;AAAA;AAAa,yBAAb;AAAa,qBAAb,EAvSxC;AAAA,oBAuS4B;AAAA;AAAA,iBAvS5B;AAAA;;AAkSH;AAAG;;;;qCA4OE;AAAA;;AAAA,gEApOI,EAoOJ,UATA,kCA1NO;AAAA;AAAA,iBA0NP,EAAuC,6BA1NzB;AAAA,4CAAY;AAAA;AAAA,qBAAZ;AAAA,kBA0NyB,CAAvC,aASA,EANA,+CAAgD,wCAAhD,aAMA;AAA6D;;;uCAzOlD;AAAA,4CAlSb,2BAkSa;AAAuD;;;;;;;;AAqB9C;AAAA,6CAUnB,aAAyB;AAAA;AAAA,SAAzB,CAVmB,+BAanB,UACC;AAAA,mBAAG,2BAAH,GACK,kDADL;AAAA,SADD,CAbmB,mCAmBnB,UACC;AAAA,mBAAG,2BAAH,GACK;AAAsB;AAAtB;AAA0C,aAA1C,EADL;AAAA,SADD,CAnBmB,kCAwBlB;AACS,2CAAyB;AAAA;AAAA,aAAzB;AAEV,6BAAsB;AAAsB;AAAtB;AAAuC,aAA7D;AAHa,SAAZ,EAxBkB,qCA8BnB,aAAyB;AAAA;AAAA,SAAzB,CA9BmB,GAElB;AAGI,yBADA,oBAA0B;AAAA;AAAA,aAA1B,YACA;;AAEL,oBAAe;AAAA;AAAA;AAAmC,aAAnC,EAAf;AALG,SAAF,EAFkB;AA8ByB;;AAnZvD,gCAgaO;AAAA,iCAAkB;AAAA;AAAA;AAAA;AAAA,SAAlB;AAAA,KAFH,CACG,oCADH,+CACG,EADH,CA9ZJ;;AAkaA,qBAiKU,uCAAgD,6BAhKvC,mBAgKuC,CAAhD,aAjKV,EAEI,0CAFJ","file":"redux-todomvc.js","sourceRoot":"/Users/alfonsogarciacaronunez/Documents/Github/Fable/temp","sourcesContent":["(**\n - title: React-Redux TodoMVC with Fable\n - tagline: Use Redux development tools with Fable\n - app-style: width:800px; margin:20px auto 50px auto;\n - require-paths: `'react': 'lib/react/react-with-addons', 'react-dom': 'lib/react/react-dom', 'redux': 'lib/redux/redux'`\n - intro: This is a port of [React-Redux TodoMVC](https://github.com/reactjs/redux/tree/master/examples/todomvc) to show how easy\n   is to take advantage of the full power of [React](https://facebook.github.io/react/) and [Redux](http://redux.js.org/) in Fable apps.\n   You can also compare the [F# source code](https://github.com/fable-compiler/Fable/blob/master/samples/browser/react-redux/react-redux.fsx)\n   with the [original JS implementation](https://github.com/reactjs/redux/tree/master/examples/todomvc)\n   to see the advantages of Fable programming. And you can install the [Redux DevTools](http://zalmoxisus.github.io/redux-devtools-extension/)\n   to get the full debugging experience of modern JS development with Fable!\n*)\n\n(**\n## JavaScript bindings\n\nFable includes [React bindings and helpers](https://www.npmjs.com/package/fable-import-react)\nto make interaction with the tool more idiomatic in F#.\n*)\n\n#r \"node_modules/fable-core/Fable.Core.dll\"\n#load \"node_modules/fable-import-react/Fable.Import.React.fs\"\n#load \"node_modules/fable-import-react/Fable.Helpers.React.fs\"\n\n(**\n## Redux helper\n\nFable's support for Redux is experimental and there're no bindings available.\nIn order to use Redux in you Fable apps, just copy the code of the module below\nand be sure to add Redux as a JS dependency.\n*)\n\nmodule Redux =\n    open System\n    open Fable.Import\n    open Fable.Core\n    open Fable.Core.JsInterop\n\n    type IStore<'TState, 'TAction> = interface end\n\n    let [<Import(\"createStore\",\"redux\")>] private createStore' = obj()\n\n    let createStore (reducer: 'TState->'TAction->'TState) (initState: 'TState) =\n        // Check if the action is a union type before applying the reducer\n        let reducer = fun state action ->\n            match box action?Case with\n            | :? string -> reducer state action\n            | _ -> state\n        match unbox Browser.window?devToolsExtension with\n        | Some ext -> createStore'$(Func<_,_,_> reducer, initState, ext$())\n        | None -> createStore'$(Func<_,_,_> reducer, initState)\n        |> unbox<IStore<'TState, 'TAction>>\n\n    let dispatch (store: IStore<'TState, 'TAction>) (x: 'TAction) =\n        let x = toPlainJsObj x\n        x?``type`` <- x?Case\n        store?dispatch(x) |> ignore\n\n    let inline subscribe (store: IStore<'TState, 'TAction>) (f: unit->unit) =\n        store?subscribe(f) |> ignore\n\n    let inline getState (store: IStore<'TState, 'TAction>) =\n        store?getState() |> unbox<'TState>\n\n(**\n## Domain models\n\nOpen the necessary namespaces, define our domain models (`Todo`, `TodoAction`, `TodoFilter`)\nand some utilities (key codes, `classNames`).\n*)\n\nopen System\nopen Fable.Core\nopen Fable.Core.JsInterop\nopen Fable.Import\n\nmodule R = Fable.Helpers.React\nopen R.Props\n\ntype Todo = { Text: string; Completed: bool; Id: int } \n\ntype TodoAction =\n    | AddTodo of text:string\n    | DeleteTodo of id:int\n    | EditTodo of id:int * text:string\n    | CompleteTodo of id:int\n    | CompleteAll\n    | ClearCompleted\n\ntype TodoFilter =\n    | ShowAll = 0\n    | ShowActive = 1\n    | ShowCompleted = 2\n\nlet [<Literal>] ESCAPE_KEY = 27.\nlet [<Literal>] ENTER_KEY = 13.\n\nlet classNames =\n    List.choose (fun (txt,add) -> if add then Some txt else None)\n    >> String.concat \" \"\n\n(**\n## React components\n\nDefine React components in the same way as explained in [React guide](https://facebook.github.io/react/docs/reusable-components.html#es6-classes)\nbut with statically checked `props` and `state` types and the DSL from the [Fable React helper](https://www.npmjs.com/package/fable-import-react).\nCheck the `render` method of each component and the [Fable React TodoMVC sample](https://fable-compiler.github.io/samples/react-todomvc/index.html#/) for details,\nor scroll down to see how to subscribe React components to the Redux store.\n*)\n\ntype TodoTextInputProps =\n    abstract OnSave: string->unit\n    abstract Text: string option\n    abstract Placeholder: string\n    abstract Editing: bool\n    abstract NewTodo: bool\n\ntype TodoTextInputState = { Text: string }\n\ntype TodoTextInput(props, ctx) as this =\n    inherit React.Component<TodoTextInputProps, TodoTextInputState>(props, ctx)\n    do this.state <- { Text = defaultArg props.Text \"\" } \n\n    member this.HandleSubmit(e: React.KeyboardEvent) =\n        if e.which = ENTER_KEY then\n            let text = (unbox<string> e.target?value).Trim()\n            this.props.OnSave(text)\n            if this.props.NewTodo then\n                this.setState({ Text = \"\" })\n\n    member this.HandleChange(e: React.SyntheticEvent) =\n        this.setState({ Text=unbox e.target?value })\n\n    member this.HandleBlur(e: React.SyntheticEvent) =\n        if not this.props.NewTodo then\n            this.props.OnSave(unbox e.target?value)\n\n    member this.render() =\n        R.input [\n            ClassName(\n                classNames [\n                    \"edit\", this.props.Editing\n                    \"new-todo\", this.props.NewTodo\n                ])\n            Type \"text\"\n            OnBlur this.HandleBlur\n            OnChange this.HandleChange\n            OnKeyDown this.HandleSubmit\n            AutoFocus (this.state.Text.Length > 0)\n            Placeholder this.props.Placeholder\n        ] []\n\ntype TodoItemProps =\n    abstract Todo: Todo\n    abstract EditTodo: int * string -> unit\n    abstract DeleteTodo: int -> unit\n    abstract CompleteTodo: int -> unit\n\ntype TodoItemState = { Editing: bool }\n\ntype TodoItem(props, ctx) as this =\n    inherit React.Component<TodoItemProps, TodoItemState>(props, ctx)\n    do this.state <- { Editing = false } \n\n    member this.HandleDoubleClick(_) =\n        this.setState({ Editing = true })\n\n    member this.HandleSave(id, text: string) =\n        if text.Length = 0\n        then this.props.DeleteTodo(id)\n        else this.props.EditTodo(id, text)\n        this.setState({ Editing = false })\n\n    member this.render() =\n        let element =\n            if this.state.Editing\n            then R.com<TodoTextInput,_,_>\n                    { new TodoTextInputProps with\n                        member __.OnSave(text: string) =\n                            this.HandleSave(this.props.Todo.Id, text)\n                        member __.Editing = this.state.Editing\n                        member __.Text = Some this.props.Todo.Text\n                        member __.Placeholder = \"\"\n                        member __.NewTodo = false } []\n            else R.div [ClassName \"view\"] [\n                    R.input [\n                        ClassName \"toggle\"\n                        Type \"checkbox\"\n                        Checked this.props.Todo.Completed\n                        OnChange (fun _ ->\n                            this.props.CompleteTodo(this.props.Todo.Id))\n                    ] []\n                    R.label [OnDoubleClick this.HandleDoubleClick]\n                            [unbox this.props.Todo.Text]\n                    R.div [\n                        ClassName \"destroy\"\n                        OnClick (fun _ ->\n                            this.props.DeleteTodo(this.props.Todo.Id))\n                    ] []\n                ]\n        R.li [ClassName(\n                classNames [\n                    \"completed\", this.props.Todo.Completed\n                    \"editing\", this.state.Editing])]\n             [element]\n\ntype HeaderProps = { AddTodo: string->unit }\n\nlet Header (props: HeaderProps) =\n    R.header [ClassName \"header\"] [\n        R.h1 [] [unbox \"todos\"]\n        R.com<TodoTextInput,_,_>\n            { new TodoTextInputProps with\n                member __.OnSave(text: string) =\n                    if text.Length <> 0 then\n                        props.AddTodo text\n                member __.Placeholder = \"What needs to be done?\"\n                member __.NewTodo = true\n                member __.Text = None\n                member __.Editing = false } []\n    ]\n\ntype FooterProps =\n    abstract ActiveCount: int\n    abstract CompletedCount: int\n    abstract Filter: TodoFilter\n    abstract OnShow: TodoFilter->unit\n    abstract OnClearCompleted: React.SyntheticEvent->unit\n\nlet Footer =\n    let filterTitles =\n        dict [\n            TodoFilter.ShowAll, \"All\"\n            TodoFilter.ShowActive, \"Active\"\n            TodoFilter.ShowCompleted, \"Completed\"\n        ]\n    let renderTodoCount activeCount =\n        R.span [ClassName \"todo-count\"] [\n            unbox(sprintf \"%s item%s left\"\n                (if activeCount > 0 then string activeCount else \"No\")\n                (if activeCount <> 1 then \"s\" else \"\"))\n        ]\n    let renderFilterLink filter selectedFilter onShow =\n        R.a [\n            ClassName (classNames [\"selected\", filter = selectedFilter])\n            Style [unbox(\"cursor\", \"pointer\")]\n            OnClick (fun _ -> onShow filter)\n        ] [unbox filterTitles.[filter]]\n    let renderClearButton completedCount onClearCompleted =\n        if completedCount > 0\n        then R.button [\n                ClassName \"clear-completed\"\n                OnClick onClearCompleted\n             ] [unbox \"Clear completed\"] |> Some\n        else None\n    fun (props: FooterProps) ->\n        let listItems =\n            [ TodoFilter.ShowAll\n              TodoFilter.ShowActive\n              TodoFilter.ShowCompleted ]\n            |> List.map (fun filter ->\n                [renderFilterLink filter props.Filter props.OnShow]\n                |> R.li [Key (string filter)])\n        R.footer [ClassName \"footer\"] [\n            renderTodoCount props.ActiveCount\n            R.ul [ClassName \"filters\"] listItems\n            // We can pass option types as React children but we\n            // need to use `unbox` to appease the F# compiler\n            unbox(renderClearButton props.CompletedCount props.OnClearCompleted)\n        ]\n\ntype MainSectionProps = { Todos: Todo[]; Dispatch: TodoAction->unit }\ntype MainSectionState = { Filter: TodoFilter }\n\ntype MainSection(props, ctx) as this =\n    inherit React.Component<MainSectionProps, MainSectionState>(props, ctx)\n    let todoFilters =\n        dict [\n            TodoFilter.ShowAll, fun _ -> true\n            TodoFilter.ShowActive, fun (todo: Todo) -> not todo.Completed\n            TodoFilter.ShowCompleted, fun todo -> todo.Completed\n        ]\n    do this.state <- { Filter = TodoFilter.ShowAll } \n\n    member this.HandleClearCompleted() =\n        this.props.Dispatch(ClearCompleted)\n\n    member this.HandleShow(filter) =\n        this.setState({ Filter = filter })\n\n    member this.renderToggleAll(completedCount) =\n        if this.props.Todos.Length > 0\n        then R.input [\n                ClassName \"toggle-all\"\n                Type \"checkbox\"\n                Checked (completedCount = this.props.Todos.Length)\n                OnChange (fun _ -> this.props.Dispatch(CompleteAll))\n             ] [] |> Some\n        else None\n\n    member this.renderFooter(completedCount) =\n        if this.props.Todos.Length > 0\n        then R.fn Footer\n                { new FooterProps with\n                    member __.ActiveCount =\n                        this.props.Todos.Length - completedCount\n                    member __.CompletedCount = completedCount\n                    member __.Filter = this.state.Filter\n                    member __.OnShow filter = this.HandleShow filter\n                    member __.OnClearCompleted _ =\n                        this.HandleClearCompleted() } [] |> Some\n        else None\n\n    member this.render() =\n        let filteredTodos =\n            this.props.Todos\n            |> Array.filter todoFilters.[this.state.Filter]\n            |> Array.toList\n        let completedCount =\n            (0, this.props.Todos) ||> Array.fold (fun count todo ->\n                if todo.Completed then count + 1 else count)\n        R.section [ClassName \"main\"] [\n            unbox(this.renderToggleAll completedCount)\n            R.ul [ClassName \"todo-list\"]\n                (filteredTodos\n                |> List.map (fun todo ->\n                    R.com<TodoItem,_,_>\n                        { new TodoItemProps with\n                            member __.Todo = todo\n                            member __.EditTodo(id, text) =\n                                this.props.Dispatch(EditTodo(id, text))\n                            member __.DeleteTodo(id) =\n                                this.props.Dispatch(DeleteTodo id)\n                            member __.CompleteTodo(id) =\n                                this.props.Dispatch(CompleteTodo id) } []))\n            unbox(this.renderFooter completedCount)\n        ]\n\n(**\n## Subscription to Redux store\n\nThe component on top of our UI hierarchy subscribes to the Redux store\nand will automatically invalidate children rendering as needed. React\nchecks when DOM updates are actually necessary, so we don't need to worry\nabout the performance hit of too frequent updates.\n*)\n\ntype AppProps = { Store: Redux.IStore<Todo[], TodoAction> }\n\ntype App(props, ctx) as this =\n    inherit React.Component<AppProps, MainSectionProps>(props, ctx)\n    let dispatch = Redux.dispatch props.Store\n    let getState() = { Todos=Redux.getState props.Store; Dispatch=dispatch }\n    do this.state <- getState()\n    do Redux.subscribe props.Store (getState >> this.setState)\n\n    member this.render() =\n        R.div [] [\n            R.fn Header { AddTodo = AddTodo >> dispatch } []\n            R.com<MainSection,_,_> this.state []\n        ]\n\n(**\n## Reducer\n\nThe reducer is a single function (which can be composed of other smaller function)\nwith the responsibility of updating the state in reaction to the actions\ndispatched to the Redux store. F# union types and pattern matching makes\nit really easy to identify and extract the data from the received actions\nin a type-safe manner. The compiler will even warn us if we forget to handle\nany of the possible `TodoAction` cases.\n*)\n\nlet reducer (state: Todo[]) = function\n    | AddTodo text ->\n        let id =\n            (-1, state)\n            ||> Array.fold(fun id todo -> max id todo.Id)\n            |> (+) 1\n        state\n        |> Array.append [|{Id=id; Completed=false; Text=text}|]\n    | DeleteTodo id ->\n        state\n        |> Array.filter(fun todo -> todo.Id <> id) \n    | EditTodo(id, text) ->\n        state\n        |> Array.map(fun todo ->\n            if todo.Id = id\n            then { todo with Text=text }\n            else todo)\n    | CompleteTodo id ->\n        state\n        |> Array.map(fun todo ->\n            if todo.Id = id\n            then { todo with Completed=not todo.Completed }\n            else todo)\n    | CompleteAll ->\n        let areAllMarked =\n            state |> Array.forall(fun todo -> todo.Completed)\n        state\n        |> Array.map(fun todo -> { todo with Completed=not areAllMarked})\n    | ClearCompleted ->\n        state\n        |> Array.filter(fun todo -> not todo.Completed) \n\n(**\n## Firing up the app\n\nThere's nothing left to do but create the Redux store with the reducer\nand the initial state, pass it to our `App` component, and mount it\nonto the DOM by using `ReactDom.render`. Happy coding!\n*)   \n\nlet store =\n    { Text=\"Use Fable + React + Redux\"; Completed=false; Id=0}\n    |> Array.singleton\n    |> Redux.createStore reducer\n\nReactDom.render(\n    R.com<App,_,_> { Store=store } [],\n    Browser.document.getElementsByClassName(\"todoapp\").[0]\n) |> ignore\n"]}